"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config = require('../../config/config');
const path = require('path');
const Vision = require('@google-cloud/vision');
const colors = require('colors/safe');
const util = require('util');
const del = require('del');
function respondWithResult(res, statusCode) {
    statusCode = statusCode || 200;
    return function (entity) {
        if (entity) {
            return res.status(statusCode).json(entity);
        }
        return null;
    };
}
function handleError(res, statusCode) {
    statusCode = statusCode || 500;
    return function (err) {
        res.status(statusCode).send(err);
    };
}
function handleEntityNotFound(res) {
    return function (entity) {
        if (!entity) {
            res.status(404).end();
            return null;
        }
        return entity;
    };
}
function deleteImage(res, path) {
    return function (entity) {
        const imageDeleted = del.sync([path]);
        return entity;
    };
}
function analyzeImage(req, res) {
    const vision = Vision({
        projectId: 'cloudapis-166021',
        keyFilename: config.rootPath + '/config/CloudAPIS-f102f98da353.json'
    });
    // console.log(colors.red(
    //   util.inspect(req.file, { showHidden: true, depth: null })
    // ));
    const types = ['crops', 'document', 'faces', 'landmarks', 'labels', 'logos', 'properties', 'safeSearch', 'similar', 'text'];
    vision.detect(req.file.path, types)
        .then(deleteImage(res, req.file.path))
        .then(handleEntityNotFound(res))
        .then(respondWithResult(res))
        .catch(handleError(res));
    return null;
}
exports.analyzeImage = analyzeImage;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcGkvdmlzaW9uL3Zpc2lvbi5jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBS0EsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDOUMsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdCLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQy9DLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN0QyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0IsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRTNCLDJCQUEyQixHQUFhLEVBQUUsVUFBbUI7SUFDM0QsVUFBVSxHQUFHLFVBQVUsSUFBSSxHQUFHLENBQUM7SUFDL0IsTUFBTSxDQUFDLFVBQVMsTUFBVztRQUN6QixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ1gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLENBQUM7UUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2QsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELHFCQUFxQixHQUFhLEVBQUUsVUFBbUI7SUFDckQsVUFBVSxHQUFHLFVBQVUsSUFBSSxHQUFHLENBQUM7SUFDL0IsTUFBTSxDQUFDLFVBQVMsR0FBd0I7UUFDdEMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbkMsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELDhCQUE4QixHQUFhO0lBQ3pDLE1BQU0sQ0FBQyxVQUFTLE1BQVc7UUFDekIsRUFBRSxDQUFBLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ1gsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUN0QixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUNELE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDaEIsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELHFCQUFxQixHQUFhLEVBQUUsSUFBWTtJQUM5QyxNQUFNLENBQUMsVUFBUyxNQUFXO1FBQ3pCLE1BQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDaEIsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELHNCQUE2QixHQUFRLEVBQUUsR0FBYTtJQUNsRCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDcEIsU0FBUyxFQUFFLGtCQUFrQjtRQUM3QixXQUFXLEVBQUUsTUFBTSxDQUFDLFFBQVEsR0FBRyxxQ0FBcUM7S0FDckUsQ0FBQyxDQUFDO0lBRUgsMEJBQTBCO0lBQzFCLDhEQUE4RDtJQUM5RCxNQUFNO0lBRU4sTUFBTSxLQUFLLEdBQUcsQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUU1SCxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQztTQUNoQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3JDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMvQixJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDNUIsS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzNCLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBbEJELG9DQWtCQyIsImZpbGUiOiJzcmMvYXBpL3Zpc2lvbi92aXNpb24uY29udHJvbGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgUmVxdWVzdCxcbiAgICBSZXNwb25zZSxcbiAgICBFcnJvclJlcXVlc3RIYW5kbGVyXG59IGZyb20gJ2V4cHJlc3MnO1xuY29uc3QgY29uZmlnID0gcmVxdWlyZSgnLi4vLi4vY29uZmlnL2NvbmZpZycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IFZpc2lvbiA9IHJlcXVpcmUoJ0Bnb29nbGUtY2xvdWQvdmlzaW9uJyk7XG5jb25zdCBjb2xvcnMgPSByZXF1aXJlKCdjb2xvcnMvc2FmZScpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbmNvbnN0IGRlbCA9IHJlcXVpcmUoJ2RlbCcpO1xuXG5mdW5jdGlvbiByZXNwb25kV2l0aFJlc3VsdChyZXM6IFJlc3BvbnNlLCBzdGF0dXNDb2RlPzogbnVtYmVyKSB7XG4gIHN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlIHx8IDIwMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKGVudGl0eTogYW55KSB7XG4gICAgaWYgKGVudGl0eSkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoc3RhdHVzQ29kZSkuanNvbihlbnRpdHkpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IocmVzOiBSZXNwb25zZSwgc3RhdHVzQ29kZT86IG51bWJlcikge1xuICBzdGF0dXNDb2RlID0gc3RhdHVzQ29kZSB8fCA1MDA7XG4gIHJldHVybiBmdW5jdGlvbihlcnI6IEVycm9yUmVxdWVzdEhhbmRsZXIpIHtcbiAgICByZXMuc3RhdHVzKHN0YXR1c0NvZGUpLnNlbmQoZXJyKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlRW50aXR5Tm90Rm91bmQocmVzOiBSZXNwb25zZSkge1xuICByZXR1cm4gZnVuY3Rpb24oZW50aXR5OiBhbnkpIHtcbiAgICBpZighZW50aXR5KSB7XG4gICAgICByZXMuc3RhdHVzKDQwNCkuZW5kKCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGVudGl0eTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGVsZXRlSW1hZ2UocmVzOiBSZXNwb25zZSwgcGF0aDogc3RyaW5nKSB7XG4gIHJldHVybiBmdW5jdGlvbihlbnRpdHk6IGFueSkge1xuICAgIGNvbnN0IGltYWdlRGVsZXRlZCA9IGRlbC5zeW5jKFtwYXRoXSk7XG4gICAgcmV0dXJuIGVudGl0eTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFuYWx5emVJbWFnZShyZXE6IGFueSwgcmVzOiBSZXNwb25zZSk6IG51bGwge1xuICBjb25zdCB2aXNpb24gPSBWaXNpb24oe1xuICAgIHByb2plY3RJZDogJ2Nsb3VkYXBpcy0xNjYwMjEnLFxuICAgIGtleUZpbGVuYW1lOiBjb25maWcucm9vdFBhdGggKyAnL2NvbmZpZy9DbG91ZEFQSVMtZjEwMmY5OGRhMzUzLmpzb24nXG4gIH0pO1xuXG4gIC8vIGNvbnNvbGUubG9nKGNvbG9ycy5yZWQoXG4gIC8vICAgdXRpbC5pbnNwZWN0KHJlcS5maWxlLCB7IHNob3dIaWRkZW46IHRydWUsIGRlcHRoOiBudWxsIH0pXG4gIC8vICkpO1xuXG4gIGNvbnN0IHR5cGVzID0gWydjcm9wcycsICdkb2N1bWVudCcsICdmYWNlcycsICdsYW5kbWFya3MnLCAnbGFiZWxzJywgJ2xvZ29zJywgJ3Byb3BlcnRpZXMnLCAnc2FmZVNlYXJjaCcsICdzaW1pbGFyJywgJ3RleHQnXTtcblxuICB2aXNpb24uZGV0ZWN0KHJlcS5maWxlLnBhdGgsIHR5cGVzKVxuICAgIC50aGVuKGRlbGV0ZUltYWdlKHJlcywgcmVxLmZpbGUucGF0aCkpXG4gICAgLnRoZW4oaGFuZGxlRW50aXR5Tm90Rm91bmQocmVzKSlcbiAgICAudGhlbihyZXNwb25kV2l0aFJlc3VsdChyZXMpKVxuICAgIC5jYXRjaChoYW5kbGVFcnJvcihyZXMpKTtcbiAgcmV0dXJuIG51bGw7XG59Il19
